{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass CartService {\n  // This function returns the cart.\n  // This needs to be updated to include a UserID parameter, which we'll hardcode\n  // for now, but will need to be updated to be dynamic later.\n  // for now we'll hardcode the UserID as the server, but this will definitely\n  // have to be updated later.\n  constructor(http) {\n    this.http = http;\n    // This is the cart. It's an array of IProduct objects.\n    //cart: IProduct[] = [];\n    this.cart = new BehaviorSubject([]);\n    this.http.get('/api/Cart').subscribe({\n      next: cart => this.cart.next(cart)\n    });\n  }\n  add(product) {\n    /* DJS: just push the individual product to the server, not the whole cart.\n     * The API on the server is expecting only a singular product, not the whole cart.\n     * Additionally, interestingly, if we do try to push the whole cart, the server will\n     * reject it with a 400 Bad Request error, presumably because the server realizes\n     * the we pushed and array of objects to it, not a singular object.  No problem,\n     * any shopping cart should only add one item at a time, not the whole cart, to the\n     * database.\n     */\n    //this.cart.push(product);\n    this.http.post('/api/Cart', product).subscribe(response => {\n      console.log('Added to cart: \"' + product.name + '\" with return code:' + response);\n    });\n  }\n  getCart() {\n    return this.cart.asObservable();\n  }\n  // This function removes a product from the cart.\n  remove(product) {\n    // DJS: The server is expecting a singular product, not the whole cart.\n    //this.cart = this.cart.filter((p) => p !== product);\n    this.http.delete('/api/Cart/' + product.productID).subscribe(response => {\n      console.log('Removed from cart: \"' + product.name + '\" with return code:' + response);\n    });\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.HttpClient));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});\nexport { CartService };","map":{"version":3,"names":["BehaviorSubject","CartService","constructor","http","cart","get","subscribe","next","add","product","post","response","console","log","name","getCart","asObservable","remove","delete","productID","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\djs\\dev\\Angular\\AngularFundamentals\\RobotClient\\03\\RobotClient\\src\\app\\cart\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { IProduct } from '../catalog/product.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class CartService\r\n{\r\n  // This is the cart. It's an array of IProduct objects.\r\n  //cart: IProduct[] = [];\r\n  private cart: BehaviorSubject<IProduct[]> = new BehaviorSubject<IProduct[]>([]);\r\n\r\n\r\n  // This function returns the cart.\r\n  // This needs to be updated to include a UserID parameter, which we'll hardcode\r\n  // for now, but will need to be updated to be dynamic later.\r\n  // for now we'll hardcode the UserID as the server, but this will definitely\r\n  // have to be updated later.\r\n  constructor(private http: HttpClient)\r\n  {\r\n    this.http.get<IProduct[]>('/api/Cart').subscribe(\r\n    {\r\n      next:(cart) => this.cart.next(cart),\r\n    });\r\n  }\r\n  \r\n  add(product: IProduct)\r\n  {\r\n\r\n    /* DJS: just push the individual product to the server, not the whole cart.\r\n     * The API on the server is expecting only a singular product, not the whole cart.\r\n     * Additionally, interestingly, if we do try to push the whole cart, the server will\r\n     * reject it with a 400 Bad Request error, presumably because the server realizes\r\n     * the we pushed and array of objects to it, not a singular object.  No problem,\r\n     * any shopping cart should only add one item at a time, not the whole cart, to the\r\n     * database.\r\n     */\r\n\r\n    //this.cart.push(product);\r\n    this.http.post('/api/Cart', product).subscribe((response) => {\r\n      console.log('Added to cart: \"' + product.name + '\" with return code:' + response);\r\n    })\r\n  }\r\n\r\n  getCart(): Observable<IProduct[]>\r\n  {\r\n    return this.cart.asObservable();\r\n  }\r\n\r\n  // This function removes a product from the cart.\r\n  remove(product: IProduct)\r\n  {\r\n    // DJS: The server is expecting a singular product, not the whole cart.\r\n    //this.cart = this.cart.filter((p) => p !== product);\r\n    this.http.delete('/api/Cart/' + product.productID).subscribe((response) => {\r\n      console.log('Removed from cart: \"' + product.name + '\" with return code:' + response);\r\n    })\r\n   }\r\n\r\n}\r\n\r\n"],"mappings":"AAGA,SAASA,eAAe,QAAoB,MAAM;;;AAElD,MAIaC,WAAW;EAOtB;EACA;EACA;EACA;EACA;EACAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAVxB;IACA;IACQ,KAAAC,IAAI,GAAgC,IAAIJ,eAAe,CAAa,EAAE,CAAC;IAU7E,IAAI,CAACG,IAAI,CAACE,GAAG,CAAa,WAAW,CAAC,CAACC,SAAS,CAChD;MACEC,IAAI,EAAEH,IAAI,IAAK,IAAI,CAACA,IAAI,CAACG,IAAI,CAACH,IAAI;KACnC,CAAC;EACJ;EAEAI,GAAGA,CAACC,OAAiB;IAGnB;;;;;;;;IASA;IACA,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,WAAW,EAAED,OAAO,CAAC,CAACH,SAAS,CAAEK,QAAQ,IAAI;MAC1DC,OAAO,CAACC,GAAG,CAAC,kBAAkB,GAAGJ,OAAO,CAACK,IAAI,GAAG,qBAAqB,GAAGH,QAAQ,CAAC;IACnF,CAAC,CAAC;EACJ;EAEAI,OAAOA,CAAA;IAEL,OAAO,IAAI,CAACX,IAAI,CAACY,YAAY,EAAE;EACjC;EAEA;EACAC,MAAMA,CAACR,OAAiB;IAEtB;IACA;IACA,IAAI,CAACN,IAAI,CAACe,MAAM,CAAC,YAAY,GAAGT,OAAO,CAACU,SAAS,CAAC,CAACb,SAAS,CAAEK,QAAQ,IAAI;MACxEC,OAAO,CAACC,GAAG,CAAC,sBAAsB,GAAGJ,OAAO,CAACK,IAAI,GAAG,qBAAqB,GAAGH,QAAQ,CAAC;IACvF,CAAC,CAAC;EACH;;AAnDUV,WAAW,C;mBAAXA,WAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXtB,WAAW,C;SAAXA,WAAW;EAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;EAAAC,UAAA,EAHV;AAAM;SAGPzB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}