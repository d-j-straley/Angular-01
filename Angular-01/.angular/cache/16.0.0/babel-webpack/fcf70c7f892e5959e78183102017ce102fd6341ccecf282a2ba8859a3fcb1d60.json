{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ProductService {\n  constructor(http) {\n    this.http = http;\n  }\n  getProducts() {\n    /* I would like to get the products from the server, and\n       place them in an intermediate variable called \"products\"\n       which is of type IProduct[] .  I'm doing this so that I\n       can really inspect that variable once it gets filled with data.\n       */\n    let products = [];\n    // fill the variable with data from the server\n    this.http.get('api/RobotCatalog').subscribe(data => products = data);\n    // return the variable\n    // something is still wrong here.  I'm not sure what it is.\n    return products;\n    //return this.http.get<IProduct[]>('api/RobotCatalog');\n  }\n}\n\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});\nexport { ProductService };","map":{"version":3,"names":["ProductService","constructor","http","getProducts","products","get","subscribe","data","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\djs\\dev\\Angular\\AngularFundamentals\\Joes-Robot-Shop-Client-Visualstudio\\joes-robot-shop\\joes-robot-shop\\src\\app\\catalog\\product.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IProduct } from './product.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService\n{\n  constructor(private http: HttpClient) { }\n  \n  getProducts() : Observable<IProduct[]>\n  {\n    /* I would like to get the products from the server, and\n       place them in an intermediate variable called \"products\"\n       which is of type IProduct[] .  I'm doing this so that I\n       can really inspect that variable once it gets filled with data.\n       */\n    let products: IProduct[] = [];\n    // fill the variable with data from the server\n    this.http.get<IProduct[]>('api/RobotCatalog').subscribe((data) => products = data);\n    // return the variable\n    // something is still wrong here.  I'm not sure what it is.\n    return products;\n    //return this.http.get<IProduct[]>('api/RobotCatalog');\n  }\n}\n"],"mappings":";;AAKA,MAGaA,cAAc;EAEzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,WAAWA,CAAA;IAET;;;;;IAKA,IAAIC,QAAQ,GAAe,EAAE;IAC7B;IACA,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,kBAAkB,CAAC,CAACC,SAAS,CAAEC,IAAI,IAAKH,QAAQ,GAAGG,IAAI,CAAC;IAClF;IACA;IACA,OAAOH,QAAQ;IACf;EACF;;;AAlBWJ,cAAc,C;mBAAdA,cAAc,EAAAQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAdX,cAAc,C;SAAdA,cAAc;EAAAY,OAAA,EAAdZ,cAAc,CAAAa,IAAA;EAAAC,UAAA,EAFb;AAAM;SAEPd,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}